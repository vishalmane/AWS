public abstract class ShellServiceTimer
    {
        System.Threading.Timer _timer = null;

        private readonly int _timeout = 0;
        protected ShellServiceTimer(int timeout)
        {
            _timeout = timeout * 1000;
        }
        public virtual void StartTimer()
        {
            try
            {
                StopTimer();
                _timer = new System.Threading.Timer(CallBack, Thread.CurrentThread.CurrentCulture, _timeout, Timeout.Infinite);
            }
            catch (Exception ex)
            {
                Console.WriteLine(ex.Message + Environment.NewLine + ex.StackTrace);
            }
        }
        public virtual void StopTimer()
        {
            try
            {
                if (_timer != null)
                {
                    _timer.Dispose();
                    _timer = null;
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine(ex.Message + Environment.NewLine + ex.StackTrace);
            }
        }

        protected internal abstract void CallBack(object source);

    }
